{
    "sourceFile": "frontend/src/redux/doctorSlice.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1742110726815,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742584268452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,42 @@\n-import { createSlice } from \"@reduxjs/toolkit\";\r\n+import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n+import axiosInstance from \"../utils/axiosInstant\";\r\n \r\n-export const doctorSlice = createSlice({\r\n-  name: \"doctorSlice\",\r\n+// Thunk for fetching doctors\r\n+export const fetchDoctors = createAsyncThunk(\r\n+  \"doctors/fetchDoctors\",\r\n+  async (_, { rejectWithValue }) => {\r\n+    try {\r\n+      const response = await axiosInstance.get(\"/api/doctors\");\r\n+      return response.data;\r\n+    } catch (error) {\r\n+      return rejectWithValue(error.response?.data?.message || \"Failed to fetch\");\r\n+    }\r\n+  }\r\n+);\r\n+\r\n+const doctorSlice = createSlice({\r\n+  name: \"doctorKey\",\r\n   initialState: {\r\n     doctors: [],\r\n     loading: false,\r\n     error: null,\r\n   },\r\n-  reducers: {\r\n-    //set doctors\r\n-    setDoctors: (state, action) => {\r\n-      state.doctors = action.payload;\r\n-    },\r\n-    //set loading\r\n-    setLoading: (state, action) => {\r\n-      state.loading = action.payload;\r\n-    },\r\n-    //set error\r\n-    setError: (state, action) => {\r\n-      state.error = action.payload;\r\n-    },\r\n+  reducers: {},\r\n+  extraReducers: (builder) => {\r\n+    builder\r\n+      .addCase(fetchDoctors.pending, (state) => {\r\n+        state.loading = true;\r\n+        state.error = null;\r\n+      })\r\n+      .addCase(fetchDoctors.fulfilled, (state, action) => {\r\n+        state.loading = false;\r\n+        state.doctors = action.payload;\r\n+      })\r\n+      .addCase(fetchDoctors.rejected, (state, action) => {\r\n+        state.loading = false;\r\n+        state.error = action.payload;\r\n+      });\r\n   },\r\n });\r\n-export const { setDoctors, setLoading, setError } = doctorSlice.actions;\r\n+\r\n export default doctorSlice.reducer;\r\n"
                },
                {
                    "date": 1742584438802,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,44 +1,26 @@\n-import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\n-import axiosInstance from \"../utils/axiosInstant\";\r\n+import { createSlice } from \"@reduxjs/toolkit\";\r\n \r\n-// Thunk for fetching doctors\r\n-export const fetchDoctors = createAsyncThunk(\r\n-  \"doctors/fetchDoctors\",\r\n-  async (_, { rejectWithValue }) => {\r\n-    try {\r\n-      const response = await axiosInstance.get(\"/api/doctors\");\r\n-      return response.data;\r\n-    } catch (error) {\r\n-      return rejectWithValue(\r\n-        error.response?.data?.message || \"Failed to fetch\"\r\n-      );\r\n-    }\r\n-  }\r\n-);\r\n-\r\n-const doctorSlice = createSlice({\r\n-  name: \"doctorKey\",\r\n+export const doctorSlice = createSlice({\r\n+  name: \"doctorSlice\",\r\n   initialState: {\r\n     doctors: [],\r\n     loading: false,\r\n     error: null,\r\n   },\r\n-  reducers: {},\r\n-  extraReducers: (builder) => {\r\n-    builder\r\n-      .addCase(fetchDoctors.pending, (state) => {\r\n-        state.loading = true;\r\n-        state.error = null;\r\n-      })\r\n-      .addCase(fetchDoctors.fulfilled, (state, action) => {\r\n-        state.loading = false;\r\n-        state.doctors = action.payload;\r\n-      })\r\n-      .addCase(fetchDoctors.rejected, (state, action) => {\r\n-        state.loading = false;\r\n-        state.error = action.payload;\r\n-      });\r\n+  reducers: {\r\n+    //set doctors\r\n+    setDoctors: (state, action) => {\r\n+      state.doctors = action.payload;\r\n+    },\r\n+    //set loading\r\n+    setLoading: (state, action) => {\r\n+      state.loading = action.payload;\r\n+    },\r\n+    //set error\r\n+    setError: (state, action) => {\r\n+      state.error = action.payload;\r\n+    },\r\n   },\r\n });\r\n-\r\n+export const { setDoctors, setLoading, setError } = doctorSlice.actions;\r\n export default doctorSlice.reducer;\r\n"
                }
            ],
            "date": 1742110726815,
            "name": "Commit-0",
            "content": "import { createSlice } from \"@reduxjs/toolkit\";\r\n\r\n\r\nexport const doctorSlice=createSlice({\r\n    name:'doctorSlice',\r\n    initialState:{\r\n        doctors:[],\r\n        loading:false,\r\n        error:null,\r\n    },\r\n    reducers:{\r\n        //set doctors\r\n        setDoctors:(state,action)=>{\r\n            state.doctors=action.payload;\r\n        },\r\n        //set loading\r\n        setLoading:(state,action)=>{\r\n\r\n            state.loading=action.payload;\r\n        },\r\n        //set error\r\n        setError:(state,action)=>{\r\n            state.error=action.payload;\r\n        }\r\n\r\n\r\n    }\r\n\r\n});\r\nexport const {setDoctors,setLoading,setError} =doctorSlice.actions;\r\nexport default doctorSlice.reducer;"
        }
    ]
}