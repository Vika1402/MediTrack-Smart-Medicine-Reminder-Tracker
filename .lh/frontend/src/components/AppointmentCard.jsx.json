{
    "sourceFile": "frontend/src/components/AppointmentCard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1742580718039,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1742581511874,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,9 +13,8 @@\n   const dispatch = useDispatch();\r\n   const navigate = useNavigate();\r\n   // Initialize a state to store selected statuses for each appointment\r\n   const [statusMap, setStatusMap] = useState({});\r\n-  console.log(appointments);\r\n \r\n   // Function to handle status change for a specific row\r\n   const handleStatusChange = (e, id) => {\r\n     setStatusMap((prev) => ({\r\n"
                },
                {
                    "date": 1742581583948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n   const dispatch = useDispatch();\r\n   const navigate = useNavigate();\r\n   // Initialize a state to store selected statuses for each appointment\r\n   const [statusMap, setStatusMap] = useState({});\r\n+  console.log(appointments);\r\n \r\n   // Function to handle status change for a specific row\r\n   const handleStatusChange = (e, id) => {\r\n     setStatusMap((prev) => ({\r\n@@ -261,5 +262,5 @@\n     </div>\r\n   );\r\n }\r\n \r\n-export default AppointmentCard;\r\n+export default AppointmentCard;\n\\ No newline at end of file\n"
                }
            ],
            "date": 1742580718039,
            "name": "Commit-0",
            "content": "import React, { useState } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport useFetchAllAppointments from \"../hooks/useFetchAllApointments\";\r\nimport { MdDeleteSweep } from \"react-icons/md\";\r\nimport axiosInstance from \"../utils/axiosInstant\";\r\nimport { toast } from \"react-toastify\";\r\nimport { updateAppointmentStatus } from \"../redux/appointmentSlice\"; // Assuming you have this action\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction AppointmentCard() {\r\n  const { appointments } = useSelector((store) => store.appointmentKey);\r\n  const { user } = useSelector((store) => store.userKey);\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  // Initialize a state to store selected statuses for each appointment\r\n  const [statusMap, setStatusMap] = useState({});\r\n  console.log(appointments);\r\n\r\n  // Function to handle status change for a specific row\r\n  const handleStatusChange = (e, id) => {\r\n    setStatusMap((prev) => ({\r\n      ...prev,\r\n      [id]: e.target.value, // Update the status for the specific appointment\r\n    }));\r\n  };\r\n\r\n  const updateStatusHandler = async (id, currentStatus) => {\r\n    const newStatus = statusMap[id] || currentStatus; // Get the updated status for that specific appointment\r\n\r\n    // Optimistically update the status in the local UI\r\n    dispatch(updateAppointmentStatus({ id, status: newStatus }));\r\n\r\n    try {\r\n      const res = await axiosInstance.put(`/api/appointment/${id}`, {\r\n        status: newStatus,\r\n      });\r\n\r\n      if (res.data.success) {\r\n        toast.success(res.data.message);\r\n        setStatusMap((prev) => {\r\n          const newMap = { ...prev };\r\n          delete newMap[id]; // Reset the status change after successful API call\r\n          return newMap;\r\n        });\r\n      } else {\r\n        toast.error(res.data.message);\r\n      }\r\n    } catch (error) {\r\n      toast.error(error.response?.data?.message || \"Something went wrong!\");\r\n      // Revert the status change in case of error\r\n      dispatch(updateAppointmentStatus({ id, status: currentStatus }));\r\n    }\r\n  };\r\n\r\n  const removeAppointmentHandler = async (id) => {\r\n    try {\r\n      const res = await axiosInstance.delete(`/api/appointment/${id}`);\r\n\r\n      if (res.data.success) {\r\n        toast.success(res.data.message);\r\n      }\r\n    } catch (error) {\r\n      toast.error(\r\n        error.response?.data?.message || \"Failed to delete appointment.\"\r\n      );\r\n    }\r\n  };\r\n\r\n  // Get today's date to filter today's appointments\r\n  const todayDate = new Date().toLocaleDateString(\"en-CA\"); // Format: YYYY-MM-DD\r\n\r\n  // Filter appointments by their status\r\n  const groupByStatus = (appointments) => {\r\n    return {\r\n      Pending: appointments.filter((item) => item.status === \"Pending\"),\r\n      Confirmed: appointments.filter((item) => item.status === \"Confirmed\"),\r\n      Completed: appointments.filter((item) => item.status === \"Completed\"),\r\n      Cancelled: appointments.filter((item) => item.status === \"Cancelled\"),\r\n    };\r\n  };\r\n\r\n  // Filter today's appointments\r\n  const todayAppointments = appointments.filter(\r\n    (item) =>\r\n      new Date(item.appointmentDate).toLocaleDateString(\"en-CA\") === todayDate\r\n  );\r\n\r\n  const groupedAppointments = groupByStatus(appointments);\r\n\r\n  return (\r\n    <div className=\"w-full h-screen\">\r\n      {/* Today's Appointments Section */}\r\n      <div className=\"mb-6\">\r\n        <p className=\"text-xl font-bold mb-3 text-center\">\r\n          Today's Appointments\r\n        </p>\r\n        <div className=\"w-full h-2 bg-red-400\"></div>\r\n        <div className=\"overflow-x-auto w-full\">\r\n          <table className=\"table table-xs w-full\">\r\n            <thead>\r\n              <tr>\r\n                <th>Index</th>\r\n                <th>Patient Name</th>\r\n                <th>Doctor</th>\r\n                <th>Appointment Date</th>\r\n                <th>Appointment Time</th>\r\n                <th>Status</th>\r\n                <th>Actions</th>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              {todayAppointments\r\n                .filter((item) => item.userId !== user._id) // Exclude current user's appointments if needed\r\n                .map((item, index) => (\r\n                  <tr key={item._id}>\r\n                    <th>{index + 1}</th>\r\n                    <td>{item.userId.name}</td>{\" \"}\r\n                    {/* Assuming user object has a name */}\r\n                    <td>{item.doctorId.name}</td>{\" \"}\r\n                    {/* Assuming doctor object has a name */}\r\n                    <td>\r\n                      {new Date(item.appointmentDate).toLocaleDateString()}\r\n                    </td>\r\n                    <td>{item.appointmentTime}</td>\r\n                    <td>\r\n                      {/* Status Dropdown */}\r\n                      <select\r\n                        value={statusMap[item._id] || item.status} // Default value is the current status\r\n                        onChange={(e) => handleStatusChange(e, item._id)} // Update status for this specific row\r\n                        className=\"select select-bordered w-full max-w-xs bg-white\"\r\n                      >\r\n                        <option value=\"Pending\">Pending</option>\r\n                        <option value=\"Confirmed\">Confirmed</option>\r\n                        <option value=\"Completed\">Completed</option>\r\n                        <option value=\"Cancelled\">Cancelled</option>\r\n                      </select>\r\n                    </td>\r\n                    <td className=\"flex items-center gap-3\">\r\n                      {/* Status Update Button */}\r\n                      <button\r\n                        onClick={() =>\r\n                          updateStatusHandler(item._id, item.status)\r\n                        }\r\n                        className=\"btn btn-sm btn-primary\"\r\n                      >\r\n                        Change Status\r\n                      </button>\r\n                      {/* Delete Appointment Button */}\r\n                      <span onClick={() => removeAppointmentHandler(item._id)}>\r\n                        <MdDeleteSweep className=\"text-3xl text-red-500\" />\r\n                      </span>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Sections for other appointment statuses */}\r\n      {Object.keys(groupedAppointments).map((status) => (\r\n        <div key={status} className=\"mb-6 w-full\">\r\n          <p className=\"text-center text-lg \">{status} Appointments</p>\r\n          <div className=\"w-full h-1 bg-green-400\"></div>\r\n          <div className=\"overflow-x-auto w-full\">\r\n            <table className=\"table table-xs w-full\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Index</th>\r\n                  <th>Patient Name</th>\r\n                  <th>Doctor</th>\r\n                  <th>Appointment Date</th>\r\n                  <th>Appointment Time</th>\r\n                  <th>Status</th>\r\n                  <th>Actions</th>\r\n                  {status === \"Completed\" && <th>Add Prescription</th>}\r\n\r\n                  {status === \"Completed\" && <th>Add Reminder</th>}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {groupedAppointments[status]\r\n                  .filter((item) => item.userId !== user._id)\r\n                  .map((item, index) => (\r\n                    <tr key={item._id}>\r\n                      <th>{index + 1}</th>\r\n                      <td>{item.userId.name}</td>{\" \"}\r\n                      {/* Assuming user object has a name */}\r\n                      <td>{item.doctorId.name}</td>{\" \"}\r\n                      {/* Assuming doctor object has a name */}\r\n                      <td>\r\n                        {new Date(item.appointmentDate).toLocaleDateString()}\r\n                      </td>\r\n                      <td>{item.appointmentTime}</td>\r\n                      <td>\r\n                        {/* Status Dropdown */}\r\n                        <select\r\n                          value={statusMap[item._id] || item.status} // Default value is the current status\r\n                          onChange={(e) => handleStatusChange(e, item._id)} // Update status for this specific row\r\n                          className=\"select select-bordered w-full max-w-xs bg-white\"\r\n                        >\r\n                          <option value=\"Pending\">Pending</option>\r\n                          <option value=\"Confirmed\">Confirmed</option>\r\n                          <option value=\"Completed\">Completed</option>\r\n                          <option value=\"Cancelled\">Cancelled</option>\r\n                        </select>\r\n                      </td>\r\n                      <td className=\"flex items-center gap-3\">\r\n                        {/* Status Update Button */}\r\n                        <button\r\n                          onClick={() =>\r\n                            updateStatusHandler(item._id, item.status)\r\n                          }\r\n                          className=\"btn btn-sm btn-primary\"\r\n                        >\r\n                          Change Status\r\n                        </button>\r\n                        {/* Delete Appointment Button */}\r\n                        <span\r\n                          onClick={() => removeAppointmentHandler(item._id)}\r\n                        >\r\n                          <MdDeleteSweep className=\"text-3xl text-red-500\" />\r\n                        </span>\r\n                      </td>\r\n                      {status === \"Completed\" && (\r\n                        <td>\r\n                          <button\r\n                            onClick={() =>\r\n                              navigate(`/prescription/${item._id}`)\r\n                            }\r\n                            className=\"btn btn-sm btn-success me-2\"\r\n                          >\r\n                            add priscription\r\n                          </button>\r\n                          <button\r\n                            onClick={() =>\r\n                              navigate(`/edit-prescription/${item._id}`)\r\n                            }\r\n                            className=\"btn btn-sm btn-warning\"\r\n                          >\r\n                            edit prescription\r\n                          </button>\r\n                        </td>\r\n                      )}\r\n                      {status === \"Completed\" && (\r\n                        <td>\r\n                          <button\r\n                            onClick={() => navigate(\"/add-reminder\")}\r\n                            className=\"btn btn-sm btn-success\"\r\n                          >\r\n                            add reminder\r\n                          </button>\r\n                        </td>\r\n                      )}\r\n                    </tr>\r\n                  ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AppointmentCard;"
        }
    ]
}